// Leetcode#39
/**
 * @param {number[]} candidates
 * @param {number} target
 * @return {number[][]}
 */
var combinationSum = function(candidates, target) {
    let result =[]
    let backtrack = (path, start)=>{
        let sum = 0
        for(let j=0;j<path.length;j++){
            sum+=path[j]
        }
        if(sum===target){
            result.push([...path])
            return
        }
        if(sum>= target){
            return
        }
        for(let i=start;i<candidates.length;i++){
            path.push(candidates[i])
            backtrack(path, i)
            path.pop()
        }

    }
    backtrack([], 0)
    return result
};

// ðŸš€ 100 Days of Code â€“ Day 74

// Today, I worked on LeetCode 39: Combination Sum â€” a classic backtracking problem that really tests recursive exploration and pruning.

// âœ¨ Problem Summary:
// Given an array of candidate numbers (without duplicates) and a target number, the goal is to find all unique combinations of candidates where the chosen numbers sum up to the target.

// You may use the same number multiple times.

// Order of elements doesnâ€™t matter, only the combination itself.

// Example:
// For candidates = [2,3,6,7] and target = 7, the answer is:
// [[2,2,3], [7]].

// ðŸ§© Approach: Backtracking
// ðŸ”¹ I built combinations incrementally, adding candidates to a current path.
// ðŸ”¹ At each recursive call, I checked the sum of the path:

// If it equals the target â†’ add to results.

// If it exceeds the target â†’ stop exploring further (pruning).
// ðŸ”¹ The key detail: when recursing, I allowed the same index (i) again, so that numbers could be reused in the combination.
// ðŸ”¹ After exploring, I backtracked by removing the last element and continued with the next candidate.

// ðŸ“Š Complexity Analysis:
// Time: Roughly O(2^t), where t is the target value (since each decision is include/exclude).
// Space: O(target) for recursion stack depth.

// ðŸ’¡ Learning Highlights:
// ðŸ”¹ Backtracking shines when the search space is large but can be pruned effectively.
// ðŸ”¹ Allowing repeated use of elements required a subtle tweak in recursion (recurse with i, not i+1).
// ðŸ”¹ This problem strengthened my understanding of combination-building logic in recursion.

// ðŸ“ˆ Reflection:
// Itâ€™s fascinating how a problem that seems like brute force at first becomes efficient and elegant with backtracking.
// This one felt like piecing together a puzzle â€” testing paths, pruning wrong ones, and saving the valid combinations.

// #100DaysOfCode #LeetCode #JavaScript #Backtracking #Recursion #ProblemSolving #CodingChallenge #Algorithm #DeveloperJourney #DSA #Coding